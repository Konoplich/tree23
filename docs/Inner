
Эта поддержка основана на книге Lewis and Denenberg, "Data Structures and   
	Их алгоритмы", 1991, стр. 229-236.  Согласно их определению,
	дерево 2-3 обладает тремя свойствами:
	  1. Все листья имеют одинаковую глубину и содержат 1 или 2 ключа.
	  2. Внутренний узел (узел, не являющийся листом) либо:
	     a) содержит один ключ и имеет два дочерних узла (2-узел), либо
	     б) содержит два ключа и имеет три дочерних узла (3-узел).
	  3. Ключ внутреннего узла находится между (в словарном порядке) ключами
	     ключами в поддеревьях его смежных дочерних узлов.  Если узел является
	     2-узловым, то это просто свойство дерева двоичного поиска; в 3-узловом
	     два ключа разделяют ключи в поддеревьях на три диапазона,
       те, что меньше меньшего из значений ключа, те, что между двумя
	     значениями ключей, и те, которые больше, чем большее значение ключа.

	Это называется "внутренним", поскольку значения ключей хранятся во всех узлах
	дерева (в отличие от "внешнего" дерева, где ключи хранятся только
	в узлах листьев.

	Если каждый узел является 2-узловым, то высота дерева равна log2(n).  Если каждый
	узел является 3-узловым, высота дерева равна log3(n).  Таким образом, высота
	высота любого произвольного внутреннего дерева 2-3 находится в диапазоне:
				log3(n) <= height <= log2(n)

	Поскольку высота внутреннего 2-3 дерева лежит в диапазоне от log2(n) до log3(n),
	максимальное количество узлов, необходимое для поиска, в среднем меньше, чем
	чем для поиска во внешнем 2-3-дереве.

	Кроме того, поскольку искомые значения могут храниться во внутренних
	листьях, в лучшем случае операция поиска может найти нужный ключ
	еще до достижения узла листа.  Это делает время поиска в лучшем и среднем случае
	время лучше, чем у внешних деревьев.  Таким образом, с точки зрения алгоритмического анализа
	внутренние 2-3 дерева быстрее внешних 2-3 деревьев для достаточно
	больших значений n.

	Благодаря логике балансировки (слияния, разделения и поворота) 2-3 деревьев,
	все листья дерева остаются на одном уровне дерева.  Это
	происходит потому, что балансировка перемещает узлы и значения данных без
	не изменяя высоту дерева.  Единственный способ, которым высота дерева может
	измениться только в том случае, если корневой узел будет удален (в результате слияния) или если будет вставлен новый
	корневого узла (в результате слияния) или вставки нового корневого узла (в результате разделения).

	За исключением случаев, когда они применяются к корню дерева, разделение и слияние
	не изменяют глубину дерева, а только его ширину.  Таким образом 2-3
	деревья остаются сбалансированными.

	В каждом узле хранится не более трех дочерних указателей, а также два ключевых значения
	которые позволяют операциям поиска определить, нужно ли обходить
	левого, среднего или правого ребенка.

Переведено с помощью DeepL.com (бесплатная версия)

