Эта реализация 2-3 деревьев основана на описании, представленном в
	Aho, Hopcroft, and Ullman, "Data Structures and Algorithms", в переиздании 1987 года.
	репринт, страницы 169-180.

	Такое представление называется "внешним", поскольку все значения данных
	хранятся в листьях дерева, а во внутренних узлах хранятся только
	ссылки на наименьший ключ в каждом дочернем узле для облегчения поиска
	и вставки.

	В отличие от "внутреннего" представления, где значения данных могут
	также могут храниться во внутренних узлах.

	Поскольку все значения данных хранятся в листьях, поиск и вставка
	всегда занимают ровно O(log n) времени (в отличие от внутренних деревьев, где эти операции могут занимать меньше O
	операции могут занимать меньше O(log n) времени).

	Благодаря логике балансировки (слияния, разделения и поворота) 2-3 деревьев,
	все листья дерева хранятся на одном уровне дерева.  Это
	происходит потому, что балансировка перемещает узлы и значения данных без
	не изменяя глубину дерева.  Единственный способ, которым глубина дерева может
	измениться только в том случае, если корневой узел будет удален (в результате слияния) или если будет вставлен новый
	корневой узел (в результате слияния) или вставка нового корневого узла (в результате разделения).

	Разбиение и слияние не меняют глубину дерева, только его
	ширину.  Глубина изменяется только в том случае, если корень разделяется, в результате чего добавляется новый
	корень добавляется (увеличивая глубину на один уровень), или когда слияние
	приводит к тому, что у корня оказывается только один потомок, что заставляет корневой узел
	быть удален (уменьшение глубины на один уровень).

	Согласно Ахо и др., дерево 2-3 обладает двумя свойствами:
	  1: Каждый внутренний узел имеет двух или трех детей.
	  2: Каждый путь от корня до листа имеет одинаковую длину.
	Единственным исключением является дерево с нулем или одним узлом, которые рассматриваются как
	особые случаи.

	Чтобы обеспечить поиск по дереву, каждый узел хранит "нижний" ключ для
	для каждого из своих дочерних узлов.  Это позволяет логике обхода решить, следует ли
	спускаться к первому, второму или (если есть) третьему ребенку узла.
	При балансировке дерева эти "низкие" ключи необходимо обновлять, чтобы избежать
	чтобы избежать несогласованности, и эти обновления должны распространяться вверх по дереву.

	Одно отличие от версии Ахо в 2-3 деревьях заключается в том, что Ахо кэширует только
	низкий ключ для вторых и третьих детей каждого узла.  Хотя это
	достаточно для поиска, это вызывает проблемы при балансировке дерева.
	Поскольку дочерние указатели могут быть повернуты в дереве вверх, вниз или в сторону,
	кэширование младшего ключа для первого дочернего узла значительно упрощает
	синхронизацию всех ключей при балансировке вставки или удаления из дерева
	дерево

Переведено с помощью DeepL.com (бесплатная версия)

